package euler

import (
  "fmt"
  "math"

  log "github.com/sirupsen/logrus"
  "github.com/spf13/cobra"
  "github.com/spf13/viper"
)

var (
  twoCmd = &cobra.Command{
    Use:     "two",
    Aliases: []string{"2"},
    Short:   "Even Fibonacci numbers",
    Long: `
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
`,
    Run: runTwoCmd,
  }
)

func init() {
}

func setTwoCmdFlags() {
  twoCmd.Flags().IntP("below", "b", 4000000, "Number to count up to but not include")
}

func runTwoCmd(cmd *cobra.Command, args []string) {
  below := viper.GetInt("below")

  log.WithField("Below", below).Debugf("Starting solution")
  fmt.Println(solve2(below))
}

func solve2(below int) int {
  if below < 2 {
    return 0
  }
  if below < 3 {
    return 2
  }
  belowF := float64(below)
  // Every third number is even
  ratio := math.Pow(math.Phi, 3)
  sum := 0.0
  for num := 2.0; num < belowF; num = math.Round(num * ratio) {
    sum += num
  }
  return int(sum)
}
